"""A Dagger pipeline for Python generated via Magicinitâ„¢

                       _      _       _ _   
                      (_)    (_)     (_) |  
 _ __ ___   __ _  __ _ _  ___ _ _ __  _| |_ 
| '_ ` _ \ / _` |/ _` | |/ __| | '_ \| | __|
| | | | | | (_| | (_| | | (__| | | | | | |_ 
|_| |_| |_|\__,_|\__, |_|\___|_|_| |_|_|\__|
                  __/ |                     
                 |___/                      
 """

import dagger
import anyio
from dagger import dag, function, object_type, DefaultPath, Doc, field
from typing import Annotated, Self

@object_type
class Python:
    source: Annotated[dagger.Directory, DefaultPath("/"), Doc("Source directory of the project, defaults to the root of the repository")]
    {{ if .PythonVersion -}}
    python_version: Annotated[str, Doc("Python version to use, defaults to latest")] = {{.PythonVersion}}
    {{ else -}}
    # [heads up] We could not infer the python version, so we default to latest
    python_version: Annotated[str, Doc("Python version to use, defaults to latest")] = "latest"
    {{ end -}}
    ctr: Annotated[dagger.Container, Doc("Chainable empty container")] = field(default=dag.container())

    @function
    def base(self) -> Self:
        """Base container for Python project"""
        self.ctr = (
            dag.
            container().
            from_(f"python:{self.python_version}").
            with_mounted_directory("/src", self.source).
            with_workdir("/src")
        )
        return self.ctr
    
    @function
    def build(self) -> Self:
        """Build the project"""
        return (
            self.ctr.
            with_exec(["pip", "install", "-e", "."]) 
        )
    
    @function
    def lint(self):
        """Lint the project"""
        return (
            self.ctr.
            with_exec(["pip", "install", "ruff"]).
            with_exec(["ruff", "check", "."])
        )

    @function
    def test(self):
        """Test the project"""
        return (
            self.ctr.
            with_exec(["pip", "install", "pytest"]).
            with_exec(["pytest"])
        )
    
    @function
    async def ci(self):
        """Run end to end CI pipeline concurrently"""
        # install deps 
        self.base().build()

        async def run(coro):
            await coro

        async with anyio.create_task_group() as tg:
            tg.start_soon(run, self.lint())
            tg.start_soon(run, self.test())